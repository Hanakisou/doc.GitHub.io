"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[610],{981:(e,i,a)=>{a.r(i),a.d(i,{data:()=>t});const t={key:"v-7cb81266",path:"/zh/cookie.html",title:"cookie",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"前提",slug:"前提",children:[]},{level:2,title:"版本修改",slug:"版本修改",children:[]},{level:2,title:"SameSite",slug:"samesite",children:[]},{level:2,title:"影响范围",slug:"影响范围",children:[]},{level:2,title:"解决",slug:"解决",children:[{level:3,title:"注意",slug:"注意",children:[]},{level:3,title:"补充",slug:"补充",children:[]}]}],filePathRelative:"zh/cookie.md",git:{updatedTime:1639020465e3,contributors:[{name:"wanghui",email:"wanghui@mxchip.com",commits:1}]}}},908:(e,i,a)=>{a.r(i),a.d(i,{default:()=>h});var t=a(252);const l=(0,t.uE)('<h1 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h1><h2 id="前提" tabindex="-1"><a class="header-anchor" href="#前提" aria-hidden="true">#</a> 前提</h2><p>2 月份发布的 Chrome 80 版本中默认屏蔽了第三方的 Cookie</p><h2 id="版本修改" tabindex="-1"><a class="header-anchor" href="#版本修改" aria-hidden="true">#</a> 版本修改</h2><p>SameSite 从默认的 None 改为 Lax。</p><h2 id="samesite" tabindex="-1"><a class="header-anchor" href="#samesite" aria-hidden="true">#</a> SameSite</h2><ol><li>Strict 仅允许一方请求携带 Cookie，即浏览器将只发送相同站点请求的 Cookie，即当前网页 URL 与请求目标 URL 完全一致。</li><li>Lax 允许部分第三方请求携带 Cookie</li><li>None 无论是否跨站都会发送 Cookie</li></ol><h2 id="影响范围" tabindex="-1"><a class="header-anchor" href="#影响范围" aria-hidden="true">#</a> 影响范围</h2><p><img src="https://camo.githubusercontent.com/149e5a3d4eadf8a9f19f26ffc5de5a5f37a62da4/68747470733a2f2f67772e616c6963646e2e636f6d2f7466732f54423172473448794b4832674b306a535a4645585863714d7058612d313430302d3532382e706e67#align=left&amp;display=inline&amp;height=528&amp;originHeight=528&amp;originWidth=1400&amp;status=done&amp;style=none&amp;width=1400" alt=""> 对大部分 web 应用而言，Post 表单，iframe，AJAX，Image 这四种情况从以前的跨站会发送三方 Cookie，变成了不发送。 除了这些还有 script 的方式，这种方式也不会发送 Cookie，像淘宝的大部分请求都是 jsonp，如果涉及到跨站也有可能会被影响。</p><h2 id="解决" tabindex="-1"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> 解决</h2><p>将 SameSite 的值从 Lax 改为 None。</p><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><ol><li>HTTP 接口不支持 SameSite=none <ul><li>如果你想加 SameSite=none 属性，那么该 Cookie 就必须同时加上 Secure 属性，表示只有在 HTTPS 协议下该 Cookie 才会被发送。</li></ul></li><li>需要 UA 检测，部分浏览器不能加 SameSite=none <ul><li>IOS 12 的 Safari 以及老版本的一些 Chrome 会把 SameSite=none 识别成 SameSite=Strict，所以服务端必须在下发 Set-Cookie 响应头时进行 User-Agent 检测，对这些浏览器不下发 SameSite=none 属性</li></ul></li></ol><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h3><p>http-only 无法被网页脚本读取，不限制传输通路的安全性 secure 可以被网页脚本读取，只允许通过安全通路发送给服务器</p><hr>',16),r={href:"https://github.com/mqyqingfeng/Blog/issues/157#",target:"_blank",rel:"noopener noreferrer"},n=(0,t.Uk)("参考文档"),o={},h=(0,a(744).Z)(o,[["render",function(e,i){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[l,(0,t._)("p",null,[(0,t._)("a",r,[n,(0,t.Wm)(a)])])],64)}]])},744:(e,i)=>{i.Z=(e,i)=>{const a=e.__vccOpts||e;for(const[e,t]of i)a[e]=t;return a}}}]);